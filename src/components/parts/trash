// import React, { useState, useEffect } from "react";
// import { useShared } from "../parts/shared";
// import '../css/main.css';
// import CryptoLineGraph from '../statistic/react-chart'

// async function currRates (baseCurrency = 'USD') {
//   const response = await fetch(`https://open.er-api.com/v6/latest/${baseCurrency}`);    
//   if (!response.ok) {
//     throw new Error(`Error fetching currency data: ${response.statusText}`);
//   }
//   return await response.json();
// }
// async function cryptoRates() {
//   const symbols = JSON.stringify(["BTCUSDT", "ETHUSDT", "XRPUSDT", "SOLUSDT", "ADAUSDT"]);
//   const response = await fetch(`https://api.binance.com/api/v3/ticker/price?symbols=${encodeURIComponent(symbols)}`);
//   if (!response.ok) {
//     throw new Error(`Error fetching crypto data: ${response.statusText}`);
//   }
//   return await response.json();
// }
// async function fetchAllCryptoHistories(symbols = ["BTCUSDT", "ETHUSDT", "XRPUSDT", "SOLUSDT", "ADAUSDT"]) {
//   const histories = {};

//   for (const symbol of symbols) {
//     const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=1d&limit=30`);
//     if (!response.ok) {
//       console.error(`Error fetching historical data for ${symbol}: ${response.statusText}`);
//       continue; // Skip this symbol if there's an error
//     }
//     const data = await response.json();
//     histories[symbol] = data.map(item => ({
//       date: new Date(item[0]).toLocaleDateString(), // Convert timestamp to date
//       price: parseFloat(item[4]), // Closing price
//     }));
//   }

//   return histories; // Return an object with historical data for all symbols
// }

// export default function HomePage() {
//   const { balance, setBalance } = useShared('');
//   const [submitted, setSubmitted] = useState(false);
//   const [crypto, setCrypto] = useState({});
//   const [baseCurrency, setBaseCurrency] = useState('USD');
//   const [convertedBalance, setConvertedBalance] = useState(null);
//   const [cryptoHistories, setCryptoHistories] = useState({}); // State for historical data of all currencies
//   const [error, setError] = useState(null);
//   const [rates, setRates] = useState(null);


//   const handleBalance = (e) => {
//     setBalance(e.target.value);
//   };

//   useEffect(() => {
//     const savedSub = localStorage.getItem("submitted");
//     if (savedSub) {
//       setSubmitted(savedSub); 
//     }
//   }, []);

//   useEffect(() => {
//     localStorage.setItem("submitted", submitted); 
//   }, [submitted]);

// const handleCurrency = async (newCurrency) => {
//   try {
//     const data = await currRates(baseCurrency); // Fetch rates for the current base currency
//     const rate = data.rates[newCurrency]; // Get the exchange rate for the new currency

//     if (!rate) throw new Error(`Exchange rate for ${newCurrency} is not available`);

//     const calculatedBalance = (balance * rate).toFixed(2); // Calculate the converted balance
//     setConvertedBalance({ currency: newCurrency, balance: calculatedBalance }); // Store the converted balance
//   } catch (err) {
//     setError(err.message);
//     console.error("Currency conversion failed:", err);
//   }
// };

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         const data = await cryptoRates();
//         const formattedPrices = {};
//         data.forEach(item => {
//           const coin = item.symbol.replace('USDT', '').toLowerCase();
//           formattedPrices[coin] = parseFloat(item.price).toFixed(2);
//         });
//         setCrypto(formattedPrices);
//         //setCryptoHistory(data);

//       } catch (err) {
//         setError(err.message);
//         console.error("Fetch failed:", err);
//       }
//     }
//     loadData();
//   }, []);

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         const data = await currRates(baseCurrency);
//         const displayCurrencies = ['USD', 'EUR', 'GBP', 'JPY', 'KZT', 'AED'];

//         // Filter to only keep the currencies we want to display
//         const filteredRates = {};
//         displayCurrencies.forEach(currency => {
//           if (data.rates[currency]) {
//             filteredRates[currency] = data.rates[currency];
//           }
//         });
//         setRates(filteredRates);
//       } catch (err) {
//         setError(err.message);
//         console.error("Fetch failed:", err);
//       }
//     };

//     loadData();
//   }, [baseCurrency]);

//   useEffect(() => {
//     const loadAllCryptoHistories = async () => {
//       try {
//         const data = await fetchAllCryptoHistories(); // Fetch historical data for all currencies
//         setCryptoHistories(data);
//       } catch (err) {
//         setError(err.message);
//         console.error("Error fetching crypto histories:", err);
//       }
//     };

//     loadAllCryptoHistories();
//   }, []);

//   if (error) return <div className="error">Error: {error}</div>;
//   if (!rates) return <div className="loading">Loading...</div>;

//   return (
//     <div className="base">
//       {submitted ? (
//         <div>
//           <h2>Balance: {balance} {baseCurrency}</h2>
//           <button onClick={() => setSubmitted(false)}>Edit</button>
//         </div>
//       ) : (
//         <div>
//           <h2>Enter your balance:</h2>
//           <input type="text" onChange={handleBalance} />
//           <button onClick={() => setSubmitted(true)}>Submit</button>
//         </div>
//       )}

//     <div>
//       <div>
//         <select 
//         onChange={(e) => handleCurrency(e.target.value)}>
//           <option value="USD">USD</option>
//           <option value="EUR">EUR</option>
//           <option value="GBP">GBP</option>
//           <option value="KZT">KZT</option>
//           <option value="AED">AED</option>
//         </select>
//       </div>

//       {convertedBalance && (
//         <div>
//           <h3>Converted Balance:</h3>
//           <p>
//             {convertedBalance.balance} {convertedBalance.currency}
//           </p>
//         </div>
//       )}

//       {error && <p className="error">{error}</p>}
//     </div> 
    
//     <h3>Crypto Currency</h3>
//       <div className="crypto">
//         {Object.entries(cryptoHistories).map(([symbol, history]) => (
//           <div className="crypto-item" key={symbol}>
//             <p>{symbol.replace('USDT', '')}: ${crypto[symbol.replace('USDT', '').toLowerCase()]}</p>
//             <CryptoLineGraph 
//               data={history} 
//               label={symbol.replace('USDT', '')} 
//             />
//           </div>
//         ))}
//       </div>

//       <div>
//         <h2>Currency Exchange Rates</h2>
//         <select 
//           value={baseCurrency}
//           onChange={(e) => setBaseCurrency(e.target.value)}
//         >
//           {['USD', 'EUR', 'GBP', 'JPY', 'KZT'].map((curr) => (
//             <option key={curr} value={curr}>{curr}</option>
//           ))}
//         </select>

//         <div>
//           {Object.entries(rates)
//             .map(([currency, rate]) => (
//               <p key={currency}>
//                 1 {baseCurrency} = {rate.toFixed(2)} {currency}
//               </p>
//             ))}
//         </div>

//       </div>
//     </div>
//   );
// }

// // 1 - use try catch for a currency ✅  and add graph to them❌
// // 2 - add the choice of the currency to the balance and function to convert it ✅
// // 3 - add the calendar to a transaction to choose a date ✅
// // 4 - add description to a transaction ✅
// // 5 - routes LEAR THE ROUTES YOU IDIOT!!!!!✅
// // 6 - ability to create another account ❌
// // 7 - add recent transaction on the transaction page and add the link to the story pagepage✅
// // 8 - add a filter to the story pagepage✅
// // 9 - add a graph to compare the income and expenses❌
// // 10 - fix bugs in the chrome console✅




// .currency {
//   display: flex;
//   flex-wrap: wrap; /* Allow wrapping to the next row */
//   gap: 20px; /* Add spacing between items */
//   justify-content: center; /* Center the items horizontally */
// }

// .currency-item {
//   flex: 1 1 calc(33.33% - 20px); /* Each item takes up 1/3 of the row minus the gap */
//   max-width: calc(33.33% - 20px); /* Ensure the max width is 1/3 of the row */
// }